<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Alfred&#39;s Blog</title>
    <link>https://alfredyoung.club/tags/docker/</link>
    <description>Recent content in docker on Alfred&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://alfredyoung.club/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Arthas热更新生产环境的应用代码</title>
      <link>https://alfredyoung.club/2021/%E4%BD%BF%E7%94%A8arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2021/%E4%BD%BF%E7%94%A8arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81/</guid>
      <description>1. 背景 最近公司在做部分服务器迁移, 由于当初开了太多的服务器并且每台服务器上的空闲资源很多, 所以将部分服务做迁移和整合.
其中有一个服务是委托第三方jar包本地部署的, 但是现在运维将服务拆分为容器化部署后, 查看日志发现报错提示无法连接到Redis数据库, 但是连接MySQL数据库却是正常的. 使用JD-GUI反编译Jar包后发现, Redis的配置类里居然没有读取配置文件, 而是写死的127.0.0.1本地ip. 由于迁移后Redis和该服务不在一个容器内, 请求本地自然是访问不到的, 也就意味着只能通过热更新更新容器内代码了.
2. Arthas介绍  Arthas 是一款开源在线 Java 诊断工具，采用命令行交互模式，支持 web 端在线诊断，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。得益于 Arthas 强大且丰富的功能，让 Arthas 能做的事情超乎想象。
 2.1 安装 可以直接选择官网推荐的在线快速安装.
这里举例子先启动个demo容器好了:
docker run -d --name demo -p 8080:8080 \ -v /yourpath/demo.jar:/demo.jar java:8 \ java -jar /demo.jar  进入容器后直接执行:
# 下载jar curl -O https://arthas.aliyun.com/arthas-boot.jar # 启动后会下载maven依赖, 这里可以指定阿里镜像源, 这里先不启动 java -jar arthas-boot.jar --repo-mirror aliyun --use-http  2.2 编译要修改的Java类 这里用Arthas的mc命令也可以将java文件编译成class, 但是官方文档提示该命令有可能会编译失败, 所以我还是通过本地IDE来编译生成class文件.</description>
    </item>
    
    <item>
      <title>搭建基于GitLab &#43; Docker的gitlab-ci以及runner的环境设置</title>
      <link>https://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid>
      <description>1. 背景 公司使用Gitlab托管私有代码，在完成了初步的仓库搭建设置后，便考虑接入CI/CD功能。在Jenkins和Gitlab CI之间，权衡了下后还是决定使用Gitlab全家桶。
2. Gitlab-runner安装 Gitlab Runner是一个开源项目，用于运行作业并将结果发送回Gitlab。它类似于Jenkins的agent,执行CI持续集成、构建的脚本任务，且需与Gitlab CI结合使用。Gitlab CI是Gitlab随附的用于协调作业的开源持续集成服务。
2.1 安装准备 官方文档上提到了一些安装前的准备工作。
首先，你要有一台服务器，并且不能和Gitlab服务在同一台服务器上。
其次，你需要提前获取好token，这里不再赘述，根据runner的不同类型，可分别在全局设置-CI/CD或者项目设置中找到token。
参阅官方文档
2.2 通过Docker image安装并注册 这里直接采用官方文档中最后的一键安装并注册到gitlab，一行命令解决。其中有变量需要自行替换：
docker run --rm -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \ --non-interactive \ --executor &amp;quot;docker&amp;quot; \ --docker-image alpine:latest \ --url &amp;quot;https://gitlab.com/&amp;quot; \ --registration-token &amp;quot;PROJECT_REGISTRATION_TOKEN&amp;quot; \ --description &amp;quot;docker-runner&amp;quot; \ --tag-list &amp;quot;docker,aws&amp;quot; \ --run-untagged=&amp;quot;true&amp;quot; \ --locked=&amp;quot;false&amp;quot; \ --access-level=&amp;quot;not_protected&amp;quot;  输入命令后会自动从DockerHub中下载官方镜像，如果下载速度慢可自行设置docker镜像加速。
以上命令完成后，对应的config目录下(此处为/srv/gitlab-runner/config)会自动创建一个config.toml的配置文件。并且此时应该就能在gitlab的runner管理页面上看到刚才创建的runner了。
3 在项目中启用CI/CD流水线 Gitlab-CI通过在项目根目录创建一个.gitlab-ci.yml的配置文件来开启，并按照官方给定的配置项通过yaml的语言格式进行设置即可，具体的配置参考官方文档。
3.1 准备工作  使用到了google的jib-maven-plugin插件，通过调用mvn package命令来生成docker image, 之后会再有文章详细说明。 开启部署目标服务器的docker远程连接端口。  3.2 新增配置 这里直接贴上包含明细注释的完整配置：</description>
    </item>
    
    <item>
      <title>docker常用命令</title>
      <link>https://alfredyoung.club/2019/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2019/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看容器对象的底层基础信息 docker inspect &amp;lt;容器id or 容器name &amp;gt;
批量删除无标签的镜像 开发及测试环境时部署代码时每次都会自动生成同一标签的镜像，旧的镜像标签会被移除而显示为&amp;lt;none&amp;gt;
docker rmi -fdocker images | grep &amp;lsquo;&amp;rsquo; | awk &amp;lsquo;{print $3}&amp;rsquo;``
进入容器内部 docker exec -it &amp;lt;容器id or 容器name&amp;gt; /bin/sh
查看容器输出日志 docker logs -f --tail 300 &amp;lt;容器id or 容器name&amp;gt;
查看容器资源使用情况 docker stats &amp;lt;容器id, 不输入则显示全部&amp;gt;</description>
    </item>
    
  </channel>
</rss>