<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maven on Alfred&#39;s Blog</title><link>http://alfredyoung.club/tags/maven/</link><description>Recent content in maven on Alfred&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://alfredyoung.club/tags/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>使用Google Jib简化并加速Docker应用镜像的构建</title><link>http://alfredyoung.club/2019/%E4%BD%BF%E7%94%A8google-jib%E7%AE%80%E5%8C%96%E5%B9%B6%E5%8A%A0%E9%80%9Fdocker%E5%BA%94%E7%94%A8%E9%95%9C%E5%83%8F%E7%9A%84%E6%9E%84%E5%BB%BA/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>http://alfredyoung.club/2019/%E4%BD%BF%E7%94%A8google-jib%E7%AE%80%E5%8C%96%E5%B9%B6%E5%8A%A0%E9%80%9Fdocker%E5%BA%94%E7%94%A8%E9%95%9C%E5%83%8F%E7%9A%84%E6%9E%84%E5%BB%BA/</guid><description>1. 背景 在初步实现了基于GitLab + Docker的自动CI/CD流水线后,
如何优化其中的CI脚本步骤和打包部署成为了接下来的问题.仔细查看了GitLab CI的某条流水线运行日志后发现, 在拉取新打包的镜像时间耗时较多,镜像的最后一个layer体积很大,是整个应用jar包的大小.
如此一来的弊端就能明显了, 一是这样构建出来的每个镜像都是jar包的大小, 几个历史版本遗留下来, 占用的存储空间基本上就已经接近1个G了. 其次是每次pull和push的时候也都会占用大量的带宽.
所以,完美的镜像分层是应该把jar包中再细分为依赖库层和代码层的, 但是按照目前DockerFile打包的形式无法实现依赖与代码的分层剥离.
2. 解决 刚开始研究时, 先是找到了Spotify开发的一个dockerFile的maven插件,它是通过pom + dockerfile的形式配置来使用的.
虽然是方便了不少, 省去了docker build..., docker tag..., docker push...等操作,但还是没有解决根本的镜像分层问题. 再后来,便是找到了Google出品的jib-maven-plugin. 它完美利用了Docker镜像的分层机制,
并且不再需要编写Dockerfile文件,甚至都不需要启动docker daemon就能完成镜像的创建,一切都只需要通过pom文件配置即可.
下面直接贴出成品:
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.google.cloud.tools&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jib-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;container&amp;gt; &amp;lt;ports&amp;gt; &amp;lt;port&amp;gt;8084&amp;lt;/port&amp;gt; &amp;lt;/ports&amp;gt; &amp;lt;creationTime&amp;gt;USE_CURRENT_TIMESTAMP&amp;lt;/creationTime&amp;gt; &amp;lt;entrypoint&amp;gt; &amp;lt;arg&amp;gt;/bin/sh&amp;lt;/arg&amp;gt; &amp;lt;arg&amp;gt;-c&amp;lt;/arg&amp;gt; &amp;lt;arg&amp;gt; java \ -Xms1024M \ -Xmx1024M \ -XX:MaxMetaspaceSize=256M \ -XX:MetaspaceSize=128M \ -XX:+UseG1GC \ -XX:MaxGCPauseMillis=100 \ -XX:+ParallelRefProcEnabled \ -XX:ErrorFile=/jvm-logs/hs_err_pid%p.log \ -Xloggc:/jvm-logs/gc.log -XX:+PrintGCDetails \ -XX:+PrintGCDateStamps \ -XX:+PrintClassHistogramBeforeFullGC \ -XX:+PrintClassHistogramAfterFullGC \ -XX:+PrintTenuringDistribution \ -XX:+HeapDumpOnOutOfMemoryError \ -XX:HeapDumpPath=/jvm-logs/ \ -cp /app/resources/:/app/classes/:/app/libs/* com.</description></item><item><title>搭建基于GitLab &#43; Docker的gitlab-ci以及runner的环境设置</title><link>http://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link><pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate><guid>http://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid><description>1. 背景 公司使用Gitlab托管私有代码，在完成了初步的仓库搭建设置后，便考虑接入CI/CD功能。在Jenkins和Gitlab CI之间，权衡了下后还是决定使用Gitlab全家桶。
2. Gitlab-runner安装 Gitlab Runner是一个开源项目，用于运行作业并将结果发送回Gitlab。它类似于Jenkins的agent,执行CI持续集成、构建的脚本任务，且需与Gitlab CI结合使用。Gitlab CI是Gitlab随附的用于协调作业的开源持续集成服务。
2.1 安装准备 官方文档上提到了一些安装前的准备工作。
首先，你要有一台服务器，并且不能和Gitlab服务在同一台服务器上。
其次，你需要提前获取好token，这里不再赘述，根据runner的不同类型，可分别在全局设置-CI/CD或者项目设置中找到token。
参阅官方文档
2.2 通过Docker image安装并注册 这里直接采用官方文档中最后的一键安装并注册到gitlab，一行命令解决。其中有变量需要自行替换：
docker run --rm -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \ --non-interactive \ --executor &amp;quot;docker&amp;quot; \ --docker-image alpine:latest \ --url &amp;quot;https://gitlab.com/&amp;quot; \ --registration-token &amp;quot;PROJECT_REGISTRATION_TOKEN&amp;quot; \ --description &amp;quot;docker-runner&amp;quot; \ --tag-list &amp;quot;docker,aws&amp;quot; \ --run-untagged=&amp;quot;true&amp;quot; \ --locked=&amp;quot;false&amp;quot; \ --access-level=&amp;quot;not_protected&amp;quot; 输入命令后会自动从DockerHub中下载官方镜像，如果下载速度慢可自行设置docker镜像加速。
以上命令完成后，对应的config目录下(此处为/srv/gitlab-runner/config)会自动创建一个config.toml的配置文件。并且此时应该就能在gitlab的runner管理页面上看到刚才创建的runner了。
3 在项目中启用CI/CD流水线 Gitlab-CI通过在项目根目录创建一个.gitlab-ci.yml的配置文件来开启，并按照官方给定的配置项通过yaml的语言格式进行设置即可，具体的配置参考官方文档。
3.1 准备工作 使用到了google的jib-maven-plugin插件，通过调用mvn package命令来生成docker image, 之后会再有文章详细说明。 开启部署目标服务器的docker远程连接端口。 3.2 新增配置 这里直接贴上包含明细注释的完整配置：</description></item></channel></rss>