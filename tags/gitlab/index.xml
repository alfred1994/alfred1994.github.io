<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gitlab on Alfred&#39;s Blog</title><link>http://alfredyoung.club/tags/gitlab/</link><description>Recent content in gitlab on Alfred&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 30 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://alfredyoung.club/tags/gitlab/index.xml" rel="self" type="application/rss+xml"/><item><title>搭建基于GitLab &#43; Docker的gitlab-ci以及runner的环境设置</title><link>http://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid>http://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid><description>1. 背景 公司使用Gitlab托管私有代码，在完成了初步的仓库搭建设置后，便考虑接入CI/CD功能。在Jenkins和Gitlab CI之间，权衡了下后还是决定使用Gitlab全家桶。
2. Gitlab-runner安装 Gitlab Runner是一个开源项目，用于运行作业并将结果发送回Gitlab。它类似于Jenkins的agent,执行CI持续集成、构建的脚本任务，且需与Gitlab CI结合使用。Gitlab CI是Gitlab随附的用于协调作业的开源持续集成服务。
2.1 安装准备 官方文档上提到了一些安装前的准备工作。
首先，你要有一台服务器，并且不能和Gitlab服务在同一台服务器上。
其次，你需要提前获取好token，这里不再赘述，根据runner的不同类型，可分别在全局设置-CI/CD或者项目设置中找到token。
参阅官方文档
2.2 通过Docker image安装并注册 这里直接采用官方文档中最后的一键安装并注册到gitlab，一行命令解决。其中有变量需要自行替换：
docker run --rm -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \ --non-interactive \ --executor &amp;quot;docker&amp;quot; \ --docker-image alpine:latest \ --url &amp;quot;https://gitlab.com/&amp;quot; \ --registration-token &amp;quot;PROJECT_REGISTRATION_TOKEN&amp;quot; \ --description &amp;quot;docker-runner&amp;quot; \ --tag-list &amp;quot;docker,aws&amp;quot; \ --run-untagged=&amp;quot;true&amp;quot; \ --locked=&amp;quot;false&amp;quot; \ --access-level=&amp;quot;not_protected&amp;quot; 输入命令后会自动从DockerHub中下载官方镜像，如果下载速度慢可自行设置docker镜像加速。
以上命令完成后，对应的config目录下(此处为/srv/gitlab-runner/config)会自动创建一个config.toml的配置文件。并且此时应该就能在gitlab的runner管理页面上看到刚才创建的runner了。
3 在项目中启用CI/CD流水线 Gitlab-CI通过在项目根目录创建一个.gitlab-ci.yml的配置文件来开启，并按照官方给定的配置项通过yaml的语言格式进行设置即可，具体的配置参考官方文档。
3.1 准备工作 使用到了google的jib-maven-plugin插件，通过调用mvn package命令来生成docker image, 之后会再有文章详细说明。 开启部署目标服务器的docker远程连接端口。 3.2 新增配置 这里直接贴上包含明细注释的完整配置：</description></item></channel></rss>