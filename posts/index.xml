<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alfred&#39;s Blog</title>
    <link>https://alfredyoung.club/posts/</link>
    <description>Recent content in Posts on Alfred&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://alfredyoung.club/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Arthas热更新生产环境的应用代码</title>
      <link>https://alfredyoung.club/2021/%E4%BD%BF%E7%94%A8arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2021/%E4%BD%BF%E7%94%A8arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81/</guid>
      <description>1. 背景 最近公司在做部分服务器迁移, 由于当初开了太多的服务器并且每台服务器上的空闲资源很多, 所以将部分服务做迁移和整合.
其中有一个服务是委托第三方jar包本地部署的, 但是现在运维将服务拆分为容器化部署后, 查看日志发现报错提示无法连接到Redis数据库, 但是连接MySQL数据库却是正常的. 使用JD-GUI反编译Jar包后发现, Redis的配置类里居然没有读取配置文件, 而是写死的127.0.0.1本地ip. 由于迁移后Redis和该服务不在一个容器内, 请求本地自然是访问不到的, 也就意味着只能通过热更新更新容器内代码了.
2. Arthas介绍  Arthas 是一款开源在线 Java 诊断工具，采用命令行交互模式，支持 web 端在线诊断，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。得益于 Arthas 强大且丰富的功能，让 Arthas 能做的事情超乎想象。
 2.1 安装 可以直接选择官网推荐的在线快速安装.
这里举例子先启动个demo容器好了:
docker run -d --name demo -p 8080:8080 \ -v /yourpath/demo.jar:/demo.jar java:8 \ java -jar /demo.jar  进入容器后直接执行:
# 下载jar curl -O https://arthas.aliyun.com/arthas-boot.jar # 启动后会下载maven依赖, 这里可以指定阿里镜像源, 这里先不启动 java -jar arthas-boot.jar --repo-mirror aliyun --use-http  2.2 编译要修改的Java类 这里用Arthas的mc命令也可以将java文件编译成class, 但是官方文档提示该命令有可能会编译失败, 所以我还是通过本地IDE来编译生成class文件.</description>
    </item>
    
    <item>
      <title>使用Google Jib简化并加速Docker应用镜像的构建</title>
      <link>https://alfredyoung.club/2020/%E4%BD%BF%E7%94%A8google-jib%E7%AE%80%E5%8C%96%E5%B9%B6%E5%8A%A0%E9%80%9Fdocker%E5%BA%94%E7%94%A8%E9%95%9C%E5%83%8F%E7%9A%84%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2020/%E4%BD%BF%E7%94%A8google-jib%E7%AE%80%E5%8C%96%E5%B9%B6%E5%8A%A0%E9%80%9Fdocker%E5%BA%94%E7%94%A8%E9%95%9C%E5%83%8F%E7%9A%84%E6%9E%84%E5%BB%BA/</guid>
      <description>1. 背景 在初步实现了基于GitLab + Docker的自动CI/CD流水线后,
如何优化其中的CI脚本步骤和打包部署成为了接下来的问题.仔细查看了GitLab CI的某条流水线运行日志后发现, 在拉取新打包的镜像时间耗时较多,镜像的最后一个layer体积很大,是整个应用jar包的大小.
如此一来的弊端就能明显了, 一是这样构建出来的每个镜像都是jar包的大小, 几个历史版本遗留下来, 占用的存储空间基本上就已经接近1个G了. 其次是每次pull和push的时候也都会占用大量的带宽.
所以,完美的镜像分层是应该把jar包中再细分为依赖库层和代码层的, 但是按照目前DockerFile打包的形式无法实现依赖与代码的分层剥离.
2. 解决 刚开始研究时, 先是找到了Spotify开发的一个dockerFile的maven插件,它是通过pom + dockerfile的形式配置来使用的.
虽然是方便了不少, 省去了docker build..., docker tag..., docker push...等操作,但还是没有解决根本的镜像分层问题. 再后来,便是找到了Google出品的jib-maven-plugin. 它完美利用了Docker镜像的分层机制,
并且不再需要编写Dockerfile文件,甚至都不需要启动docker daemon就能完成镜像的创建,一切都只需要通过pom文件配置即可.
下面直接贴出成品:
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.google.cloud.tools&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jib-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;container&amp;gt; &amp;lt;ports&amp;gt; &amp;lt;port&amp;gt;8084&amp;lt;/port&amp;gt; &amp;lt;/ports&amp;gt; &amp;lt;creationTime&amp;gt;USE_CURRENT_TIMESTAMP&amp;lt;/creationTime&amp;gt; &amp;lt;entrypoint&amp;gt; &amp;lt;arg&amp;gt;/bin/sh&amp;lt;/arg&amp;gt; &amp;lt;arg&amp;gt;-c&amp;lt;/arg&amp;gt; &amp;lt;arg&amp;gt; java \ -Xms1024M \ -Xmx1024M \ -XX:MaxMetaspaceSize=256M \ -XX:MetaspaceSize=128M \ -XX:+UseG1GC \ -XX:MaxGCPauseMillis=100 \ -XX:+ParallelRefProcEnabled \ -XX:ErrorFile=/jvm-logs/hs_err_pid%p.log \ -Xloggc:/jvm-logs/gc.log -XX:+PrintGCDetails \ -XX:+PrintGCDateStamps \ -XX:+PrintClassHistogramBeforeFullGC \ -XX:+PrintClassHistogramAfterFullGC \ -XX:+PrintTenuringDistribution \ -XX:+HeapDumpOnOutOfMemoryError \ -XX:HeapDumpPath=/jvm-logs/ \ -cp /app/resources/:/app/classes/:/app/libs/* com.</description>
    </item>
    
    <item>
      <title>搭建基于GitLab &#43; Docker的gitlab-ci以及runner的环境设置</title>
      <link>https://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid>
      <description>1. 背景 公司使用Gitlab托管私有代码，在完成了初步的仓库搭建设置后，便考虑接入CI/CD功能。在Jenkins和Gitlab CI之间，权衡了下后还是决定使用Gitlab全家桶。
2. Gitlab-runner安装 Gitlab Runner是一个开源项目，用于运行作业并将结果发送回Gitlab。它类似于Jenkins的agent,执行CI持续集成、构建的脚本任务，且需与Gitlab CI结合使用。Gitlab CI是Gitlab随附的用于协调作业的开源持续集成服务。
2.1 安装准备 官方文档上提到了一些安装前的准备工作。
首先，你要有一台服务器，并且不能和Gitlab服务在同一台服务器上。
其次，你需要提前获取好token，这里不再赘述，根据runner的不同类型，可分别在全局设置-CI/CD或者项目设置中找到token。
参阅官方文档
2.2 通过Docker image安装并注册 这里直接采用官方文档中最后的一键安装并注册到gitlab，一行命令解决。其中有变量需要自行替换：
docker run --rm -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \ --non-interactive \ --executor &amp;quot;docker&amp;quot; \ --docker-image alpine:latest \ --url &amp;quot;https://gitlab.com/&amp;quot; \ --registration-token &amp;quot;PROJECT_REGISTRATION_TOKEN&amp;quot; \ --description &amp;quot;docker-runner&amp;quot; \ --tag-list &amp;quot;docker,aws&amp;quot; \ --run-untagged=&amp;quot;true&amp;quot; \ --locked=&amp;quot;false&amp;quot; \ --access-level=&amp;quot;not_protected&amp;quot;  输入命令后会自动从DockerHub中下载官方镜像，如果下载速度慢可自行设置docker镜像加速。
以上命令完成后，对应的config目录下(此处为/srv/gitlab-runner/config)会自动创建一个config.toml的配置文件。并且此时应该就能在gitlab的runner管理页面上看到刚才创建的runner了。
3 在项目中启用CI/CD流水线 Gitlab-CI通过在项目根目录创建一个.gitlab-ci.yml的配置文件来开启，并按照官方给定的配置项通过yaml的语言格式进行设置即可，具体的配置参考官方文档。
3.1 准备工作  使用到了google的jib-maven-plugin插件，通过调用mvn package命令来生成docker image, 之后会再有文章详细说明。 开启部署目标服务器的docker远程连接端口。  3.2 新增配置 这里直接贴上包含明细注释的完整配置：</description>
    </item>
    
    <item>
      <title>docker常用命令</title>
      <link>https://alfredyoung.club/2019/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2019/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看容器对象的底层基础信息 docker inspect &amp;lt;容器id or 容器name &amp;gt;
批量删除无标签的镜像 开发及测试环境时部署代码时每次都会自动生成同一标签的镜像，旧的镜像标签会被移除而显示为&amp;lt;none&amp;gt;
docker rmi -fdocker images | grep &amp;lsquo;&amp;rsquo; | awk &amp;lsquo;{print $3}&amp;rsquo;``
进入容器内部 docker exec -it &amp;lt;容器id or 容器name&amp;gt; /bin/sh
查看容器输出日志 docker logs -f --tail 300 &amp;lt;容器id or 容器name&amp;gt;
查看容器资源使用情况 docker stats &amp;lt;容器id, 不输入则显示全部&amp;gt;</description>
    </item>
    
    <item>
      <title>通过Spring Boot Admin实现服务上下线的即时钉钉通知</title>
      <link>https://alfredyoung.club/2019/%E9%80%9A%E8%BF%87spring-boot-admin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%9A%84%E5%8D%B3%E6%97%B6%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2019/%E9%80%9A%E8%BF%87spring-boot-admin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%9A%84%E5%8D%B3%E6%97%B6%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/</guid>
      <description>1. 背景 在微服务里肯定少不了服务监控，Spring Boot Admin（以下简称SPA）虽然不是一个官方项目，但是在开源社区里的热度比较高。SPA的接入简单快速、UI简洁明了，如果使用了Spring Cloud，服务端只需要接入注册中心即可接收到其他服务通过endpoints暴露的健康检查数据。但是这样肯定还不够，但服务出现严重错误导致下线时我们需要能快速及时的接受到通知。在SPA的官方文档上能看到虽然已经自带支持了Notifications，但是大多都是支持的国外的远程协作和通讯工具。至于邮件通知，虽然是可以做到但是消息即时性太慢了，所以决定通过钉钉群机器人的消息通知API实现。
2. 实现 查看源码，发现在de.codecentric.boot.admin.server下有个包叫notify,里面有很多官方已经自实现的国外聊天工具的Notifier类，依次打开观察后发现都继承了AbstractEventNotifier这么一个抽象类，并实现了其中的以下的方法来实现主动通知：
protected abstract Mono&amp;lt;Void&amp;gt; doNotify(InstanceEvent event, Instance instance);  可以看到这里用到了Reactor类库，也就是响应式编程。对于大部分习惯了传统编程方式的人来说（就是我没错），是很难直接切换过来的，它需要你转变自己的一个思维方式。 这里代码中出现的Mono和Flux是响应式中的两个重要基础概念，总的来说就是规定了两种响应流式范式，它们让数据具备了一些新的特性，比如基于发布订阅的事件驱动、异步流、背压等。关于Reactor的详细介绍等日后有时间再详细整理，这里就先略过。
参考官方已经实现服务提醒类中的同方法：
@Override protected Mono&amp;lt;Void&amp;gt; doNotify(InstanceEvent event, Instance instance) { return Mono.fromRunnable( () -&amp;gt; restTemplate.postForEntity(buildUrl(), createHipChatNotification(event, instance), Void.class)); }8  这里可以大概看到发出了一个无值的异步线程，并用http post请求了某个消息发送接口，那么我们这里基本上也是相同的实现方式，稍作修改（复制黏贴）即可。
2.1 配置钉钉机器人webhook 在钉钉群里设置添加一下就好了，主要是拿到url。
2.2 重写消息通知方法 直接贴出完整代码，这里继承AbstractEventNotifier 或者AbstractStatusChangeNotifier都可以。除了doNotify方法外，其他代码只需要构建出钉钉机器人消息通知API所需的数据结构即可。看了下钉钉文档文案样式支持markdown，这里就顺便支持了一下。
@Component public class DingTalkNotifier extends AbstractStatusChangeNotifier { private static final String DEFAULT_MESSAGE = &amp;quot;# #{instance.registration.name} (#{instance.id}) is **#{event.statusInfo.status}**&amp;quot;; private final SpelExpressionParser parser = new SpelExpressionParser(); private RestTemplate restTemplate = new RestTemplate(); @Value(&amp;quot;${spring.</description>
    </item>
    
    <item>
      <title>Spring Cloud Eureka 服务搭建</title>
      <link>https://alfredyoung.club/2019/spring-cloud-eureka-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://alfredyoung.club/2019/spring-cloud-eureka-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</guid>
      <description>该系列文章均转自 CSDN: hubo_88, 因文章较多,故统一转入自己博客方便查阅.
 搭建服务注册中心 Spring Cloud Eureka是Spring Cloud Netflix服务套件中的一部分,它基于Netflix Eureka做了二次封装,主要负责完成微服务架构中的服务治理功能.
1.构建一个Maven项目 注：这里 Create from archetype 可以不用勾选，直接构建一个空的 maven 项目。
可以在 maven 主项目里统一管理各个子项目所引用的依赖版本，这一系列项目所用的 Spring Cloud 版本为 Finchley.RC1， Spring Boot 版本为 2.0.1.RELEASE， JDK 为 1.8
pom.xml:
&amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &amp;lt;spring-cloud.version&amp;gt;Finchley.RC1&amp;lt;/spring-cloud.version&amp;gt; &amp;lt;spring-boot.version&amp;gt;2.0.1.RELEASE&amp;lt;/spring-boot.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt;  2.创建一个module, 作为服务注册中心 Eureka Server. 注：这里 Create from archetype 仍然不用勾选，直接构建一个空的 maven 项目。</description>
    </item>
    
  </channel>
</rss>