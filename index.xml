<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alfred&#39;s Blog on Alfred&#39;s Blog</title><link>http://alfredyoung.club/</link><description>Recent content in Alfred&#39;s Blog on Alfred&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="/" rel="self" type="application/rss+xml"/><item><title>使用Google Jib简化并加速Docker应用镜像的构建</title><link>http://alfredyoung.club/2019/%E4%BD%BF%E7%94%A8google-jib%E7%AE%80%E5%8C%96%E5%B9%B6%E5%8A%A0%E9%80%9Fdocker%E5%BA%94%E7%94%A8%E9%95%9C%E5%83%8F%E7%9A%84%E6%9E%84%E5%BB%BA/</link><pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate><guid>http://alfredyoung.club/2019/%E4%BD%BF%E7%94%A8google-jib%E7%AE%80%E5%8C%96%E5%B9%B6%E5%8A%A0%E9%80%9Fdocker%E5%BA%94%E7%94%A8%E9%95%9C%E5%83%8F%E7%9A%84%E6%9E%84%E5%BB%BA/</guid><description>
&lt;h2 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h2&gt;
&lt;p&gt;在初步实现了[基于GitLab + Docker的自动CI/CD流水线](&amp;ldquo;&lt;a href=&#34;https://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/&amp;quot;)后&#34; target=&#34;_blank&#34;&gt;https://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/&amp;quot;)后&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;如何优化其中的CI脚本步骤和打包部署成为了接下来的问题.仔细查看了GitLab CI的某条流水线运行日志后发现, 在拉取新打包的镜像时间耗时较多,镜像的最后一个layer体积很大,是整个应用jar包的大小.&lt;/p&gt;
&lt;p&gt;如此一来的弊端就能明显了, 一是这样构建出来的每个镜像都是jar包的大小, 几个历史版本遗留下来, 占用的存储空间基本上就已经接近1个G了. 其次是每次&lt;code&gt;pull&lt;/code&gt;和&lt;code&gt;push&lt;/code&gt;的时候也都会占用大量的带宽.&lt;/p&gt;
&lt;p&gt;所以,完美的镜像分层是应该把jar包中再细分为依赖库层和代码层的, 但是按照目前DockerFile打包的形式无法实现依赖与代码的分层剥离.&lt;/p&gt;
&lt;h2 id=&#34;2-解决&#34;&gt;2. 解决&lt;/h2&gt;
&lt;p&gt;刚开始研究时, 先是找到了[Spotify开发的一个dockerFile的maven插件](&amp;ldquo;&lt;a href=&#34;https://github.com/spotify/dockerfile-maven&amp;quot;),它是通过pom&#34; target=&#34;_blank&#34;&gt;https://github.com/spotify/dockerfile-maven&amp;quot;),它是通过pom&lt;/a&gt; + dockerfile的形式配置来使用的.&lt;/p&gt;
&lt;p&gt;虽然是方便了不少, 省去了&lt;code&gt;docker build...&lt;/code&gt;, &lt;code&gt;docker tag...&lt;/code&gt;, &lt;code&gt;docker push...&lt;/code&gt;等操作,但还是没有解决根本的镜像分层问题.
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;再后来,便是找到了Google出品的[jib-maven-plugin](&amp;ldquo;&lt;a href=&#34;https://github.com/GoogleContainerTools/jib&amp;quot;&#34; target=&#34;_blank&#34;&gt;https://github.com/GoogleContainerTools/jib&amp;quot;&lt;/a&gt;). 它完美利用了Docker镜像的分层机制,&lt;/p&gt;
&lt;p&gt;并且不再需要编写&lt;code&gt;Dockerfile&lt;/code&gt;文件,甚至都不需要启动&lt;code&gt;docker daemon&lt;/code&gt;就能完成镜像的创建,一切都只需要通过pom文件配置即可.&lt;/p&gt;
&lt;p&gt;下面直接贴出成品:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;plugin&amp;gt;
&amp;lt;groupId&amp;gt;com.google.cloud.tools&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;jib-maven-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;container&amp;gt;
&amp;lt;ports&amp;gt;
&amp;lt;port&amp;gt;8084&amp;lt;/port&amp;gt;
&amp;lt;/ports&amp;gt;
&amp;lt;creationTime&amp;gt;USE_CURRENT_TIMESTAMP&amp;lt;/creationTime&amp;gt;
&amp;lt;entrypoint&amp;gt;
&amp;lt;arg&amp;gt;/bin/sh&amp;lt;/arg&amp;gt;
&amp;lt;arg&amp;gt;-c&amp;lt;/arg&amp;gt;
&amp;lt;arg&amp;gt;
java \
-Xms1024M \
-Xmx1024M \
-XX:MaxMetaspaceSize=256M \
-XX:MetaspaceSize=128M \
-XX:+UseG1GC \
-XX:MaxGCPauseMillis=100 \
-XX:+ParallelRefProcEnabled \
-XX:ErrorFile=/jvm-logs/hs_err_pid%p.log \
-Xloggc:/jvm-logs/gc.log -XX:+PrintGCDetails \
-XX:+PrintGCDateStamps \
-XX:+PrintClassHistogramBeforeFullGC \
-XX:+PrintClassHistogramAfterFullGC \
-XX:+PrintTenuringDistribution \
-XX:+HeapDumpOnOutOfMemoryError \
-XX:HeapDumpPath=/jvm-logs/ \
-cp /app/resources/:/app/classes/:/app/libs/* com.demo.DemoApplication \
${HOST_ENV} ${APP_ENV} ${EUREKA_ZONE} ${SERVER_PORT}
&amp;lt;/arg&amp;gt;
&amp;lt;/entrypoint&amp;gt;
&amp;lt;/container&amp;gt;
&amp;lt;from&amp;gt;
&amp;lt;image&amp;gt;${docker.secure.registry.prefix}/path/openjdk:8u212-jdk-alpine&amp;lt;/image&amp;gt;
&amp;lt;!-- 在持续集成部署中此处应动态传参 --&amp;gt;
&amp;lt;auth&amp;gt;
&amp;lt;username&amp;gt;xxx&amp;lt;/username&amp;gt;
&amp;lt;password&amp;gt;xxx&amp;lt;/password&amp;gt;
&amp;lt;/auth&amp;gt;
&amp;lt;/from&amp;gt;
&amp;lt;to&amp;gt;
&amp;lt;image&amp;gt;${docker.secure.registry.prefix}/${project.name}&amp;lt;/image&amp;gt;
&amp;lt;auth&amp;gt;
&amp;lt;username&amp;gt;xxx&amp;lt;/username&amp;gt;
&amp;lt;password&amp;gt;xxx&amp;lt;/password&amp;gt;
&amp;lt;/auth&amp;gt;
&amp;lt;tags&amp;gt;
&amp;lt;tag&amp;gt;${project.version}&amp;lt;/tag&amp;gt;
&amp;lt;tag&amp;gt;test-latest&amp;lt;/tag&amp;gt;
&amp;lt;/tags&amp;gt;
&amp;lt;/to&amp;gt;
&amp;lt;allowInsecureRegistries&amp;gt;true&amp;lt;/allowInsecureRegistries&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;executions&amp;gt;
&amp;lt;execution&amp;gt;
&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
&amp;lt;goals&amp;gt;
&amp;lt;goal&amp;gt;build&amp;lt;/goal&amp;gt;
&amp;lt;/goals&amp;gt;
&amp;lt;/execution&amp;gt;
&amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里和之前的比较起来有一点不同是, 在&lt;code&gt;EntryPoint&lt;/code&gt;中启动命令不再是之前dockerfile中的&lt;code&gt;java -jar&lt;/code&gt;方式启动了, 而是直接用&lt;code&gt;java&lt;/code&gt;命令运行了Spring Boot启动类中的main方法.&lt;/p&gt;
&lt;p&gt;由此可知, 新的镜像容器中, 放的不再是整个Jar包而是lib依赖和项目的class类文件.&lt;/p&gt;
&lt;p&gt;另外还要注意的是,在持续集成部署的脚本中通过mvn命令调用时,部分参数应在此传递, 比如docker私服的账密, 构建的基础镜像等等:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mvn clean package --settings .m2/settings.xml \
-Dmaven.repo.local=.m2/repository \
-Dmaven.test.skip=true \
-Djib.from.auth.username=$DEPLOY_USER_NAME \
-Djib.from.auth.password=$DEPLOY_USER_TOKEN \
-Djib.to.auth.username=$DEPLOY_USER_NAME \
-Djib.to.auth.password=$DEPLOY_USER_TOKEN
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>docker常用命令</title><link>http://alfredyoung.club/2019/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate><guid>http://alfredyoung.club/2019/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>
&lt;h3 id=&#34;查看容器对象的底层基础信息&#34;&gt;查看容器对象的底层基础信息&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker inspect &amp;lt;容器id or 容器name &amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;批量删除无标签的镜像&#34;&gt;批量删除无标签的镜像&lt;/h3&gt;
&lt;p&gt;开发及测试环境时部署代码时每次都会自动生成同一标签的镜像，旧的镜像标签会被移除而显示为&lt;code&gt;&amp;lt;none&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker rmi -f&lt;/code&gt;docker images | grep &amp;lsquo;&lt;none&gt;&amp;rsquo; | awk &amp;lsquo;{print $3}&amp;rsquo;``&lt;/p&gt;
&lt;h3 id=&#34;进入容器内部&#34;&gt;进入容器内部&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker exec -it &amp;lt;容器id or 容器name&amp;gt; /bin/sh&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;查看容器输出日志&#34;&gt;查看容器输出日志&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker logs -f --tail 300 &amp;lt;容器id or 容器name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;查看容器资源使用情况&#34;&gt;查看容器资源使用情况&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker stats &amp;lt;容器id, 不输入则显示全部&amp;gt;&lt;/code&gt;&lt;/p&gt;</description></item><item><title>搭建基于GitLab &#43; Docker的gitlab-ci以及runner的环境设置</title><link>http://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link><pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate><guid>http://alfredyoung.club/2019/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84gitlab-ci%E4%BB%A5%E5%8F%8Arunner%E7%9A%84%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid><description>
&lt;h2 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h2&gt;
&lt;p&gt;公司使用Gitlab托管私有代码，在完成了初步的仓库搭建设置后，便考虑接入CI/CD功能。在Jenkins和Gitlab CI之间，权衡了下后还是决定使用Gitlab全家桶。&lt;/p&gt;
&lt;h2 id=&#34;2-gitlab-runner安装&#34;&gt;2. Gitlab-runner安装&lt;/h2&gt;
&lt;p&gt;Gitlab Runner是一个开源项目，用于运行作业并将结果发送回Gitlab。它类似于Jenkins的agent,执行CI持续集成、构建的脚本任务，且需与Gitlab CI结合使用。Gitlab CI是Gitlab随附的用于协调作业的开源持续集成服务。&lt;/p&gt;
&lt;h3 id=&#34;2-1-安装准备&#34;&gt;2.1 安装准备&lt;/h3&gt;
&lt;p&gt;官方文档上提到了一些安装前的准备工作。&lt;/p&gt;
&lt;p&gt;首先，你要有一台服务器，并且不能和Gitlab服务在同一台服务器上。&lt;/p&gt;
&lt;p&gt;其次，你需要提前获取好token，这里不再赘述，根据runner的不同类型，可分别在全局设置-CI/CD或者项目设置中找到token。&lt;/p&gt;
&lt;p&gt;参阅[官方文档](&amp;ldquo;&lt;a href=&#34;https://docs.gitlab.com/runner/&amp;quot;&#34; target=&#34;_blank&#34;&gt;https://docs.gitlab.com/runner/&amp;quot;&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;2-2-通过docker-image安装并注册&#34;&gt;2.2 通过Docker image安装并注册&lt;/h3&gt;
&lt;p&gt;这里直接采用官方&lt;a href=&#34;https://docs.gitlab.com/runner/register/index.html#one-line-registration-command&#34; target=&#34;_blank&#34;&gt;文档&lt;/a&gt;中最后的一键安装并注册到gitlab，一行命令解决。其中有变量需要自行替换：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; docker run --rm -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \
--non-interactive \
--executor &amp;quot;docker&amp;quot; \
--docker-image alpine:latest \
--url &amp;quot;https://gitlab.com/&amp;quot; \
--registration-token &amp;quot;PROJECT_REGISTRATION_TOKEN&amp;quot; \
--description &amp;quot;docker-runner&amp;quot; \
--tag-list &amp;quot;docker,aws&amp;quot; \
--run-untagged=&amp;quot;true&amp;quot; \
--locked=&amp;quot;false&amp;quot; \
--access-level=&amp;quot;not_protected&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入命令后会自动从&lt;a href=&#34;https://hub.docker.com/&#34; target=&#34;_blank&#34;&gt;DockerHub&lt;/a&gt;中下载官方镜像，如果下载速度慢可自行设置&lt;a href=&#34;https://duckduckgo.com/?q=docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F&amp;amp;atb=v256-1&amp;amp;ia=web&#34; target=&#34;_blank&#34;&gt;docker镜像加速&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以上命令完成后，对应的config目录下(此处为&lt;code&gt;/srv/gitlab-runner/config&lt;/code&gt;)会自动创建一个&lt;code&gt;config.toml&lt;/code&gt;的配置文件。并且此时应该就能在gitlab的runner管理页面上看到刚才创建的runner了。&lt;/p&gt;
&lt;h2 id=&#34;3-在项目中启用ci-cd流水线&#34;&gt;3 在项目中启用CI/CD流水线&lt;/h2&gt;
&lt;p&gt;Gitlab-CI通过在项目根目录创建一个&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;的配置文件来开启，并按照官方给定的配置项通过&lt;code&gt;yaml&lt;/code&gt;的语言格式进行设置即可，具体的配置参考&lt;a href=&#34;https://docs.gitlab.com/ee/user/project/pages/getting_started/pages_from_scratch.html#prerequisites&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;3-1-准备工作&#34;&gt;3.1 准备工作&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用到了google的&lt;a href=&#34;https://mvnrepository.com/artifact/com.google.cloud.tools/jib-maven-plugin&#34; target=&#34;_blank&#34;&gt;jib-maven-plugin&lt;/a&gt;插件，通过调用mvn package命令来生成docker image, 之后会再有文章详细说明。&lt;/li&gt;
&lt;li&gt;开启部署目标服务器的&lt;a href=&#34;https://duckduckgo.com/?q=docker+%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5&amp;amp;atb=v256-1&amp;amp;ia=web&#34; target=&#34;_blank&#34;&gt;docker远程连接端口&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-2-新增配置&#34;&gt;3.2 新增配置&lt;/h3&gt;
&lt;p&gt;这里直接贴上包含明细注释的完整配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# 详见https://hub.docker.com/r/snirnx/docker-maven,通过这个镜像内包含的环境可以走完整个CI/CD流程.
# 可以将该镜像保存到自己私服,避免时间一长可能被发布者删除
image: snirnx/docker-maven:latest
# 将docker私服登录的代码简单封装,方便下面调用
.registryLogin: &amp;amp;registryLogin
- echo &amp;quot;$CI_REGISTRY_PASSWORD&amp;quot; | docker login -u &amp;quot;$CI_REGISTRY_USER&amp;quot; &amp;quot;$CI_REGISTRY&amp;quot; --password-stdin
# 设置maven阿里云镜像源,这里替换为自己的pom文件内容即可
before_script:
- mkdir -p .m2
- echo -e &amp;quot;&amp;lt;?xml version=\&amp;quot;&amp;quot;1.0\&amp;quot;&amp;quot; encoding=\&amp;quot;&amp;quot;UTF-8\&amp;quot;&amp;quot;?&amp;gt;&amp;lt;settings xmlns=\&amp;quot;&amp;quot;http://maven.apache.org/SETTINGS/1.0.0\&amp;quot;&amp;quot; xmlns:xsi=\&amp;quot;&amp;quot;http://www.w3.org/2001/XMLSchema-instance\&amp;quot;&amp;quot; xsi:schemaLocation=\&amp;quot;&amp;quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\&amp;quot;&amp;quot;&amp;gt;&amp;lt;servers&amp;gt;&amp;lt;server&amp;gt;&amp;lt;id&amp;gt;releases&amp;lt;/id&amp;gt;&amp;lt;username&amp;gt;your-username&amp;lt;/username&amp;gt;&amp;lt;password&amp;gt;your-password&amp;lt;/password&amp;gt;&amp;lt;/server&amp;gt;&amp;lt;server&amp;gt;&amp;lt;id&amp;gt;snapshots&amp;lt;/id&amp;gt;&amp;lt;username&amp;gt;your-username&amp;lt;/username&amp;gt;&amp;lt;password&amp;gt;your-password&amp;lt;/password&amp;gt;&amp;lt;/server&amp;gt;&amp;lt;server&amp;gt;&amp;lt;id&amp;gt;gitlab-maven&amp;lt;/id&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;httpHeaders&amp;gt;&amp;lt;property&amp;gt;&amp;lt;name&amp;gt;Private-Token&amp;lt;/name&amp;gt;&amp;lt;value&amp;gt;your-token&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;/httpHeaders&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/server&amp;gt;&amp;lt;/servers&amp;gt;&amp;lt;mirrors&amp;gt;&amp;lt;mirror&amp;gt;&amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt;&amp;lt;name&amp;gt;aliyunmaven&amp;lt;/name&amp;gt;&amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public/&amp;lt;/url&amp;gt;&amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;&amp;lt;/mirror&amp;gt;&amp;lt;/mirrors&amp;gt;&amp;lt;profiles&amp;gt;&amp;lt;profile&amp;gt;&amp;lt;id&amp;gt;gitlab-maven&amp;lt;/id&amp;gt;&amp;lt;repositories&amp;gt;&amp;lt;repository&amp;gt;&amp;lt;id&amp;gt;gitlab-maven&amp;lt;/id&amp;gt;&amp;lt;url&amp;gt;your-maven-private-repo-url&amp;lt;/url&amp;gt;&amp;lt;/repository&amp;gt;&amp;lt;/repositories&amp;gt;&amp;lt;/profile&amp;gt;&amp;lt;/profiles&amp;gt;&amp;lt;activeProfiles&amp;gt;&amp;lt;activeProfile&amp;gt;gitlab-maven&amp;lt;/activeProfile&amp;gt;&amp;lt;/activeProfiles&amp;gt;&amp;lt;/settings&amp;gt;&amp;quot; &amp;gt; .m2/settings.xml
# 定义步骤
stages:
- test
- build
- deploy
# 设置maven依赖缓存,依赖目录发生变动时缓存自动失效更新
cache:
paths:
- .m2/repository/
# 打包阶段
build:
stage: build
# runner的自定义标签,注册时设置,避免自己组的runner被其他的组成员占用
tags:
- java
# 输入sh命令
script:
# 调用docker私服登录
- *registryLogin
# 使用maven package进行打包,这里使用了google的jib插件,在进行打包时会同步生成镜像并推送到私服
- mvn clean package --settings .m2/settings.xml -Dmaven.repo.local=.m2/repository -Dmaven.test.skip=true -Djib.from.auth.username=$DEPLOY_USER_NAME -Djib.from.auth.password=$DEPLOY_USER_TOKEN -Djib.to.auth.username=$DEPLOY_USER_NAME -Djib.to.auth.password=$DEPLOY_USER_TOKEN
# 设置只在对应的git分支变动时触发CI
only:
refs:
- dev
deploy:
stage: deploy
tags:
- java
variables:
GIT_STRATEGY: none
# 支持配置的变量,这里配置需要部署的服务器ip,2375为docker远程连接端口
DOCKER_HOST: tcp://192.168.0.40:2375
script:
- *registryLogin
# 在目标服务器拉取最新的应用镜像
- docker pull registry.51hejia.com/hz-api/hz-crm:dev-latest
# 停止并删除当前容器并基于新镜像重新运行
- docker ps -all --filter &amp;quot;name=hz-crm&amp;quot; --format {{.ID}} |xargs --no-run-if-empty docker stop
- docker ps -all --filter &amp;quot;name=hz-crm&amp;quot; --format {{.ID}} |xargs --no-run-if-empty docker rm
# 容器启动命令
- &amp;quot;docker run -d -p 30081:30081 \
--restart=always \
-e APP_ENV=&#39;--spring.profiles.active=dev&#39; \
-e HOST_ENV=&#39;--eureka.instance.hostname=your-host&#39; \
-e SERVER_PORT=&#39;--server.port=30081&#39; \
-e EUREKA_ZONE=&#39;--eureka.client.serviceUrl.defaultZone=your-eureka-host&#39; \
-v /home/java/your-service/app-logs:/app-logs \
-v /home/java/your-service/jvm-logs:/jvm-logs \
-v /etc/hosts:/etc/hosts \
--name service-name your-docker-registry-url/group-name/service-name:dev-latest&amp;quot;
only:
refs:
- dev
# 此步骤正常是自动跳过,可手动触发检查code coverage
test:
stage: test
script:
- mvn clean test &amp;amp;&amp;amp; cat target/site/jacoco/index.html
when: manual
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-完成配置&#34;&gt;4. 完成配置&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./2021-02-19-screenshot-01.jpg&#34; alt=&#34;流水线页面成功结果展示&#34; /&gt;&lt;/p&gt;</description></item><item><title>通过Spring Boot Admin实现服务上下线的即时钉钉通知</title><link>http://alfredyoung.club/2019/%E9%80%9A%E8%BF%87spring-boot-admin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%9A%84%E5%8D%B3%E6%97%B6%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/</link><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><guid>http://alfredyoung.club/2019/%E9%80%9A%E8%BF%87spring-boot-admin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E4%B8%8A%E4%B8%8B%E7%BA%BF%E7%9A%84%E5%8D%B3%E6%97%B6%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5/</guid><description>
&lt;h2 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h2&gt;
&lt;p&gt;在微服务里肯定少不了服务监控，Spring Boot Admin（以下简称SPA）虽然不是一个官方项目，但是在开源社区里的热度比较高。SPA的接入简单快速、UI简洁明了，如果使用了Spring Cloud，服务端只需要接入注册中心即可接收到其他服务通过endpoints暴露的健康检查数据。但是这样肯定还不够，但服务出现严重错误导致下线时我们需要能快速及时的接受到通知。在SPA的官方文档上能看到虽然已经自带支持了&lt;a href=&#34;https://codecentric.github.io/spring-boot-admin/current/#_notifications&#34; target=&#34;_blank&#34;&gt;Notifications&lt;/a&gt;，但是大多都是支持的国外的远程协作和通讯工具。至于邮件通知，虽然是可以做到但是消息即时性太慢了，所以决定通过钉钉群机器人的消息通知API实现。&lt;/p&gt;
&lt;h2 id=&#34;2-实现&#34;&gt;2. 实现&lt;/h2&gt;
&lt;p&gt;查看源码，发现在&lt;code&gt;de.codecentric.boot.admin.server&lt;/code&gt;下有个包叫&lt;code&gt;notify&lt;/code&gt;,里面有很多官方已经自实现的国外聊天工具的Notifier类，依次打开观察后发现都继承了&lt;code&gt;AbstractEventNotifier&lt;/code&gt;这么一个抽象类，并实现了其中的以下的方法来实现主动通知：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;protected abstract Mono&amp;lt;Void&amp;gt; doNotify(InstanceEvent event, Instance instance);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到这里用到了Reactor类库，也就是响应式编程。对于大部分习惯了传统编程方式的人来说（就是我没错），是很难直接切换过来的，它需要你转变自己的一个思维方式。 这里代码中出现的&lt;code&gt;Mono&lt;/code&gt;和&lt;code&gt;Flux&lt;/code&gt;是响应式中的两个重要基础概念，总的来说就是规定了两种响应流式范式，它们让数据具备了一些新的特性，比如基于发布订阅的事件驱动、异步流、背压等。关于Reactor的详细介绍等日后有时间再详细整理，这里就先略过。&lt;/p&gt;
&lt;p&gt;参考官方已经实现服务提醒类中的同方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; @Override
protected Mono&amp;lt;Void&amp;gt; doNotify(InstanceEvent event, Instance instance) {
return Mono.fromRunnable(
() -&amp;gt; restTemplate.postForEntity(buildUrl(), createHipChatNotification(event, instance), Void.class));
}8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里可以大概看到发出了一个无值的异步线程，并用http post请求了某个消息发送接口，那么我们这里基本上也是相同的实现方式，稍作修改（复制黏贴）即可。&lt;/p&gt;
&lt;h3 id=&#34;2-1-配置钉钉机器人webhook&#34;&gt;2.1 配置钉钉机器人webhook&lt;/h3&gt;
&lt;p&gt;在钉钉群里设置添加一下就好了，主要是拿到url。&lt;/p&gt;
&lt;h3 id=&#34;2-2-重写消息通知方法&#34;&gt;2.2 重写消息通知方法&lt;/h3&gt;
&lt;p&gt;直接贴出完整代码，这里继承&lt;code&gt;AbstractEventNotifier&lt;/code&gt; 或者&lt;code&gt;AbstractStatusChangeNotifier&lt;/code&gt;都可以。除了&lt;code&gt;doNotify&lt;/code&gt;方法外，其他代码只需要构建出钉钉机器人消息通知API所需的数据结构即可。看了下钉钉文档文案样式支持markdown，这里就顺便支持了一下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Component
public class DingTalkNotifier extends AbstractStatusChangeNotifier {
private static final String DEFAULT_MESSAGE = &amp;quot;# #{instance.registration.name} (#{instance.id}) is **#{event.statusInfo.status}**&amp;quot;;
private final SpelExpressionParser parser = new SpelExpressionParser();
private RestTemplate restTemplate = new RestTemplate();
@Value(&amp;quot;${spring.boot.admin.notify.dingtalk.webhookToken}&amp;quot;)
private String webHookToken;
private String atMobiles;
private String msgtype = &amp;quot;markdown&amp;quot;;
private String title = &amp;quot;服务告警&amp;quot;;
private Expression message;
public DingTalkNotifier(InstanceRepository repositpry) {
super(repositpry);
this.message = parser.parseExpression(DEFAULT_MESSAGE, ParserContext.TEMPLATE_EXPRESSION);
}
@Override
protected Mono&amp;lt;Void&amp;gt; doNotify(InstanceEvent event, Instance instance) {
System.out.println(&amp;quot;开始报警&amp;quot;);
return Mono.fromRunnable(() -&amp;gt; restTemplate.postForEntity(webHookToken, createMessage(event, instance), Void.class));
}
private HttpEntity&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; createMessage(InstanceEvent event, Instance instance) {
Map&amp;lt;String, Object&amp;gt; messageJson = new HashMap&amp;lt;&amp;gt;();
HashMap&amp;lt;String, String&amp;gt; params = new HashMap&amp;lt;&amp;gt;();
params.put(&amp;quot;text&amp;quot;, this.getMessage(event, instance));
params.put(&amp;quot;title&amp;quot;, this.title);
messageJson.put(&amp;quot;atMobiles&amp;quot;, this.atMobiles);
messageJson.put(&amp;quot;msgtype&amp;quot;, this.msgtype);
messageJson.put(this.msgtype, params);
HttpHeaders headers = new HttpHeaders();
headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
return new HttpEntity&amp;lt;&amp;gt;(messageJson, headers);
}
private String getMessage(InstanceEvent event, Instance instance) {
Map&amp;lt;String, Object&amp;gt; root = new HashMap&amp;lt;&amp;gt;();
root.put(&amp;quot;event&amp;quot;, event);
root.put(&amp;quot;instance&amp;quot;, instance);
root.put(&amp;quot;lastStatus&amp;quot;, getLastStatus(event.getInstance()));
StandardEvaluationContext context = new StandardEvaluationContext(root);
context.addPropertyAccessor(new MapAccessor());
return message.getValue(context, String.class);
}
public void setRestTemplate(RestTemplate restTemplate) {
this.restTemplate = restTemplate;
}
public String getWebHookToken() {
return webHookToken;
}
public void setWebHookToken(String webHookToken) {
this.webHookToken = webHookToken;
}
public String getAtMobiles() {
return atMobiles;
}
public void setAtMobiles(String atMobiles) {
this.atMobiles = atMobiles;
}
public String getMsgtype() {
return msgtype;
}
public void setMsgtype(String msgtype) {
this.msgtype = msgtype;
}
public Expression getMessage() {
return message;
}
public void setMessage(String message) {
this.message = this.parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);
}
public String getTitle() {
return title;
}
public void setTitle(String title) {
this.title = title;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-3-测试结果&#34;&gt;2.3 测试结果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./2021-02-18-screenshot-01.jpg&#34; alt=&#34;钉钉通知结果&#34; /&gt;&lt;/p&gt;</description></item><item><title>Spring Cloud Eureka 服务搭建</title><link>http://alfredyoung.club/2019/spring-cloud-eureka-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</link><pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate><guid>http://alfredyoung.club/2019/spring-cloud-eureka-%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;该系列文章均转自 &lt;a href=&#34;https://blog.csdn.net/hubo_88/article/details/80520850&#34; target=&#34;_blank&#34;&gt;CSDN: hubo_88&lt;/a&gt;, 因文章较多,故统一转入自己博客方便查阅.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;搭建服务注册中心&#34;&gt;搭建服务注册中心&lt;/h2&gt;
&lt;p&gt;Spring Cloud Eureka是Spring Cloud Netflix服务套件中的一部分,它基于Netflix Eureka做了二次封装,主要负责完成微服务架构中的服务治理功能.&lt;/p&gt;
&lt;h4 id=&#34;1-构建一个maven项目&#34;&gt;1.构建一个Maven项目&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180531110317718?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9fODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;new maven&#34; title=&#34;构建一个maven项目&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注：这里 Create from archetype 可以不用勾选，直接构建一个空的 maven 项目。&lt;/p&gt;
&lt;p&gt;可以在 maven 主项目里统一管理各个子项目所引用的依赖版本，这一系列项目所用的 Spring Cloud 版本为 Finchley.RC1， Spring Boot 版本为 2.0.1.RELEASE， JDK 为 1.8&lt;/p&gt;
&lt;p&gt;pom.xml:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt; &amp;lt;properties&amp;gt;
&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
&amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
&amp;lt;spring-cloud.version&amp;gt;Finchley.RC1&amp;lt;/spring-cloud.version&amp;gt;
&amp;lt;spring-boot.version&amp;gt;2.0.1.RELEASE&amp;lt;/spring-boot.version&amp;gt;
&amp;lt;/properties&amp;gt;
&amp;lt;dependencyManagement&amp;gt;
&amp;lt;dependencies&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;${spring-cloud.version}&amp;lt;/version&amp;gt;
&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
&amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
&amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-创建一个module-作为服务注册中心-eureka-server&#34;&gt;2.创建一个module, 作为服务注册中心 Eureka Server.&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180531111814575?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9fODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;new module&#34; title=&#34;创建新模块&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注：这里 Create from archetype 仍然不用勾选，直接构建一个空的 maven 项目。&lt;/p&gt;
&lt;p&gt;创建完工程后，在 pom.xml 文件中引入依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-server&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-启动类&#34;&gt;3.启动类&lt;/h4&gt;
&lt;p&gt;在Spring Boot工程的application启动类加上 &lt;code&gt;@EnableEurekaServer&lt;/code&gt; 注解&lt;/p&gt;
&lt;h4 id=&#34;4-eureka的配置文件application-yaml&#34;&gt;4.Eureka的配置文件application.yaml&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
port: 8761
spring:
application:
name: eureka-service
eureka:
  instance:
    hostname: localhost
client:
#由于该应用为注册中心,设置为false,表明不向注册中心注册自己
register-with-eureka: false
#是否从eureka服务器获取注册信息，这里不需要
fetch-registry: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
logging:
level:
com:
netflix:
eureka: OFF
discovery: OFF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eureka 是一个高可用的组件（后续会配置），每一个实例注册之后需要向注册中心发送心跳，在默认情况下 erureka server 也是一个eureka client ,必须要指定一个 server，通过 eureka.client.register-with-eureka：false 和 fetch-registry：false 来设置自己是一个eureka server&lt;/p&gt;
&lt;h4 id=&#34;5-运行eurekaserviceapplication启动服务&#34;&gt;5.运行EurekaServiceApplication启动服务&lt;/h4&gt;
&lt;p&gt;在浏览器中输入&lt;code&gt;http://localhost:8761&lt;/code&gt;即可看到Eureka的管理界面.
&lt;img src=&#34;https://img-blog.csdn.net/2018053111444680?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9fODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;Eureka GUI&#34; title=&#34;eureka管理界面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当前因为还没有服务注册进来, 所以是 No instances available.&lt;/p&gt;
&lt;h2 id=&#34;搭建注册服务提供者&#34;&gt;搭建注册服务提供者&lt;/h2&gt;
&lt;h4 id=&#34;1-创建一个module-步骤同上&#34;&gt;1.创建一个module, 步骤同上.&lt;/h4&gt;
&lt;h4 id=&#34;2-添加pom依赖&#34;&gt;2.添加POM依赖&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-启动类-1&#34;&gt;3.启动类&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@SpringBootApplication
@EnableEurekaClient
@RestController
public class SpringCloudServiceApplication {
public static void main(String[] args) {
SpringApplication.run(SpringCloudServiceApplication.class, args);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过注解&lt;code&gt;@EnableEurekaClient&lt;/code&gt;表明自己是一个client.
&lt;code&gt;@EnableEurekaClient&lt;/code&gt;注解是基于 Spring-Cloud-Netflix 依赖, 只能eureka使用.
也可以使用&lt;code&gt;@EnableDiscoveryClient&lt;/code&gt;, 它基于 Spring-Cloud-Commons 依赖, 并且在 classpath中实现.&lt;/p&gt;
&lt;h4 id=&#34;4-写一个服务接口&#34;&gt;4.写一个服务接口.&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RestController
public class PortService {
@Value(&amp;quot;${server.port}&amp;quot;)
String port;
@RequestMapping(&amp;quot;port&amp;quot;)
public String getPort() {
return &amp;quot;Hello World, I&#39;m from port : &amp;quot; + port;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-配置文件application-yaml&#34;&gt;5.配置文件application.yaml&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:
port: 8281
eureka:
client:
serviceUrl:
defaultZone: http://localhost:8761/eureka/
spring:
application:
name: spring-demo-service
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-启动应用&#34;&gt;6.启动应用&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20180531125144892?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9fODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;register success&#34; title=&#34;服务注册成功&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在Eureka的控制台上已经看到应用名，证明服务提供者已经成功注册在Eureka上了&lt;/p&gt;
&lt;h4 id=&#34;7-浏览器访问-显示成功&#34;&gt;7.浏览器访问, 显示成功&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/2018053112535459?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9fODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;request success&#34; title=&#34;访问成功&#34; /&gt;&lt;/p&gt;</description></item></channel></rss>